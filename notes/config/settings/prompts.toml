# Large language model prompt templates for generative tasks.

[prompts]
features = """Hello! Please analyze the key technical capabilities and characteristics of the project {0} and describe them in a Markdown table format:

|    |   Feature         | Description |
|----|-------------------|---------------------------------------------------------------|
| ⚙️  | **Architecture**  | *Quick facts about the project's architecture. Max 50 words.* |
| 🔩 | **Code Quality**  | *Quick facts about the code quality and style. Max 50 words.* |
| 📄 | **Documentation** | *Discuss the extent and quality of documentation. Max 50 words.* |
| 🔌 | **Integrations**  | *List key integrations and external dependencies. Max 50 words.* |
| 🧩 | **Modularity**    | *Discuss the modularity and reusability of the codebase. Max 50 words.* |
| 🧪 | **Testing**       | *List testing frameworks and tools used. Max 50 words.* |
| ⚡️  | **Performance**   | *Evaluate efficiency, speed and resource usage. Max 50 words.* |
| 🛡️ | **Security**      | *Discuss measures used for data protection and access control. Max 50 words.* |
| 📦 | **Dependencies**  | *List key external libraries and dependencies. Max 50 words.* |
| 🚀 | **Scalability**   | *Assess ability to handle increased traffic and load. Max 50 words.* |

While generating the table, please reference the following codebase details:\n
================================================================================
Project dependencies: {1}
Repository contents: {2}
================================================================================
"""

file_summary = """Deliver a succinct summary that highlights the main purpose and \
critical features of this code file in relation to its parent repository's architecture. \
Focus on what the code achieves, steering clear of technical implementation details. \
While generating the summaries, please reference the following codebase details: \n
================================================================================
Repository structure: {0}
File path: {1}
File contents: {2}
================================================================================
Additional Requirements: \n
- Avoid using words like 'This file', 'The file', 'This code', etc. but instead begin \
each response with a verb or a noun to make the summary more engaging and impactful. \
- Do not include quotes, code snippets, or bullet points in your response. \
- Your response should be a maximum of 50 words.
"""

logo = """Design a sleek and modern logo for '{project_name}'. \
The logo should embody a sense of forward-thinking and efficiency.
Incorporate a simple yet bold icon that captures the essence of the project,
paired with the project name in a clean, sans-serif font. \
The icon should be abstract or geometric, suggesting movement or progress. \
The overall look should be minimalistic, with a monochromatic color palette, \
ensuring the logo is versatile for use across various mediums. \
Provide ample margin space around the logo to enhance its visibility and impact.
--------------------------------------------------------------------------------
Project Name: {project_name}
Project Slogan: {project_slogan}
--------------------------------------------------------------------------------
"""

overview = """Analyze the codebase, {0}, and provide a robust, yet succinct overview of the software \
project. Craft a paragraph that encapsulate the core functionalities of the project, its purpose, and value \
proposition. While generating the project overview, please reference the following codebase details: \n
--------------------------------------------------------------------------------
File Summaries: {1}
--------------------------------------------------------------------------------
Additional Requirements: \n
- Avoid deep technical details and focus on the project's high-level use cases and features.
- Do not include quotes, code snippets, or bullet points in your response.
- The project name should be mentioned at least once in the overview.
- Your response should be a maximum of 100 words.
"""

slogan = """Conceptualize a catchy and memorable slogan for the project: {0} ({1}). \
Your response should encapsulate the project's purpose, value proposition, and engage the audience. \
While generating the slogan, please reference the following codebase details: \n
--------------------------------------------------------------------------------
File contents: {2}
-------------------------------------------------------------------------------- \n
Other Requirements: \n
- DO NOT include the project name in the slogan.
- Your response should be a maximum of 8 words.
- The slogan should be concise and memorable.
"""

mermaid = """Create a visual representation of the software project '{0}' using a flowchart diagram. \
The diagram should clearly illustrate the main components and the flow of data or control between them, \
representing the codebase's architecture and execution path. The output should be formatted as a Markdown code block with Mermaid syntax. \
Below is a template for the Mermaid flowchart that you can customize based on the project's specifics: \n
--------------------------------------------------------------------------------

```mermaid
flowchart LR

A[Hard] -->|Text| B(Round)
B --> C{Decision}
C -->|One| D[Result 1]
C -->|Two| E[Result 2]
```

--------------------------------------------------------------------------------
While generating the diagram, please reference the following codebase details:
File Summaries: {1}
--------------------------------------------------------------------------------
"""

func_doc = """Write an API documentation for the following Python function. The documentation should include:

1. **Signature**: The function signature represents how the function is called, including the function name and its parameters.
2. **Function Summary**: A brief introduction to what the function does.
3. **Parameters**: A list with each parameter, their expected type, and a short description.
4. **Returns**: The return value of the function, its type, and a description of what it represents.
5. **Example**: Provide a simple example demonstrating how to call the function and the expected output.

Here's the function code:
{}
{}
Please format the API documentation clearly and concisely.
"""

clazz_doc = """
Create a class documentation for the following Python class according to the criteria listed below. Ensure each section is concise and organized appropriately.

Criteria for the class documentation include:

- **Class Name**: Provide the name of the class, reflecting its purpose clearly.
- **Functionality**: Write a brief description of the class's purpose and role in the program.
- **Attributes**:
  - **Public Attributes**: List and briefly describe public attributes accessible from outside the class.
  - **Private Attributes**: List and briefly describe private attributes (prefixed with double underscores in Python) accessible only within the class.
- **Methods**: List the class's methods, both public and private. Only list the method names without descriptions.
- **Constructor**: Describe the constructor (`__init__` method), its purpose, and the parameters it accepts.
- **Inheritance**: If the class inherits from another, explain from which class it derives and the inherited functionality. Also, mention if it is extended by other classes.
- **Examples**: Provide simple examples on how to initialize and use the class for quick understanding.
- **Exceptions**: Note any exceptions the class may raise, particularly within public methods.
- **Usage Scenarios**: Describe scenarios in which the class could be used, if applicable.

And here is the class information:
{}
Please follow the outlined structure to write the class documentation in a clear and professional manner.
"""